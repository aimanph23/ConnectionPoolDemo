# Server Configuration
server.port=8080

# ========================================
# Java 21 Virtual Threads (Project Loom)
# ========================================
# This makes ALL HTTP request handlers use virtual threads instead of platform threads!
# Benefits:
# - Millions of concurrent requests possible
# - Lower memory footprint (~1KB vs ~2MB per thread)
# - Better resource utilization for I/O-bound operations
# - Simplified code (no need for complex async patterns)
spring.threads.virtual.enabled=true

# Tomcat Thread Pool Configuration
# With virtual threads enabled, these become "carrier threads" that run virtual threads
# You can actually reduce these numbers with virtual threads!
server.tomcat.threads.max=3000
server.tomcat.threads.min-spare=20
server.tomcat.accept-count=100
server.tomcat.max-connections=10000
server.tomcat.connection-timeout=20000
server.tomcat.keep-alive-timeout=60000
server.tomcat.max-keep-alive-requests=100

# Application Name
spring.application.name=connection-pool-demo

# H2 In-Memory Database Configuration
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=
#Open Session in View
spring.jpa.open-in-view=false

# HikariCP Connection Pool Settings
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
# Waiting period
spring.datasource.hikari.connection-timeout=10000
# spring.datasource.hikari.validation-timeout=3000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.pool-name=HikariPool

# JPA/Hibernate Configuration
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# SQL Initialization
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql
spring.sql.init.data-locations=classpath:sample-data-10000.sql
spring.sql.init.continue-on-error=true

# Logging
logging.level.com.example=INFO
logging.level.com.zaxxer.hikari=DEBUG
logging.level.org.hibernate.SQL=INFO
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.web=INFO
logging.level.org.apache.tomcat=INFO
logging.level.org.apache.coyote=INFO

# External API Configuration (dummy API to call)
external.api.url=https://jsonplaceholder.typicode.com/posts/1

# External API Configuration (Postman Echo with configurable delay)
external.delay.api.base-url=https://postman-echo.com/delay
external.delay.api.delay-seconds=1

# Postman API 101 Collection Configuration
postman.api.base-url=https://postman-echo.com

# Product API Sleep Configuration
# Sleep duration after API call in getProductById endpoint (in milliseconds)
# Set to 0 to disable sleep
product.api.sleep.ms=300

# Product API V2 Async Sleep Configuration
# Sleep duration in async V2 endpoint before returning response (in milliseconds)
# This sleep runs in the taskExecutor thread pool
# Set to 0 to disable sleep
product.api.v2.sleep.ms=2000

# H2 Console Configuration (for development)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=true

# Spring Boot Actuator Configuration (for Tomcat metrics)
management.endpoints.web.exposure.include=health,metrics,prometheus
management.endpoint.health.show-details=always
management.metrics.enable.tomcat=true
management.metrics.enable.jvm=true
management.metrics.enable.process=true
management.metrics.enable.system=true

